import { describe, it, expect } from 'vitest';import { registerSchema } from './auth.schema';describe('registerSchema', () => {  it('should validate a correct registration payload', () => {    const payload = {      email: 'test@example.com',      password: 'password123',      confirmPassword: 'password123',    };    const result = registerSchema.safeParse(payload);    expect(result.success).toBe(true);  });  it('should invalidate an invalid email', () => {    const payload = {      email: 'invalid-email',      password: 'password123',      confirmPassword: 'password123',    };    const result = registerSchema.safeParse(payload);    expect(result.success).toBe(false);    expect(result.error?.issues[0]?.message).toBe('Invalid email address');  });  it('should invalidate a password shorter than 8 characters', () => {    const payload = {      email: 'test@example.com',      password: 'short',      confirmPassword: 'short',    };    const result = registerSchema.safeParse(payload);    expect(result.success).toBe(false);    expect(result.error?.issues[0]?.message).toBe('Password must be at least 8 characters long');  });  it('should invalidate mismatched passwords', () => {    const payload = {      email: 'test@example.com',      password: 'password123',      confirmPassword: 'password456',    };    const result = registerSchema.safeParse(payload);    expect(result.success).toBe(false);    expect(result.error?.issues[0]?.message).toBe('Passwords don\'t match');  });});