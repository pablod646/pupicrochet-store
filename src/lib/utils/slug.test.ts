import { expect, test, describe } from 'vitest';import { generateSlug, generateUniqueSlug } from './slug';describe('slug utilities', () => {  describe('generateSlug', () => {    test('should generate a URL-friendly slug', () => {      expect(generateSlug('Hello World')).toBe('hello-world');    });    test('should handle leading and trailing spaces', () => {      expect(generateSlug('  Leading and Trailing Spaces  ')).toBe('leading-and-trailing-spaces');    });    test('should remove special characters', () => {      expect(generateSlug('Special!@#$%^&*()_+-=[]{};":",./<>?~`Characters')).toBe(        'special-characters'      );    });    test('should replace multiple dashes with a single dash', () => {      expect(generateSlug('Multiple---Dashes')).toBe('multiple-dashes');    });    test('should handle non-latin characters', () => {      expect(generateSlug('áéíóúñ')).toBe('aeioun');    });  });  describe('generateUniqueSlug', () => {    const existingSlugs = [      { slug: 'existing-slug' },      { slug: 'existing-slug-1' },      { slug: 'another-one' }    ];    test('should return the original slug if it is unique', () => {      const newSlug = generateUniqueSlug('New Awesome Product', existingSlugs);      expect(newSlug).toBe('new-awesome-product');    });    test('should append a number if the slug already exists', () => {      const newSlug = generateUniqueSlug('Existing Slug', existingSlugs);      expect(newSlug).toBe('existing-slug-2');    });    test('should append the next available number', () => {      const newSlug = generateUniqueSlug('Existing Slug', [        ...existingSlugs,        { slug: 'existing-slug-2' }      ]);      expect(newSlug).toBe('existing-slug-3');    });    test('should handle an empty list of existing slugs', () => {      const newSlug = generateUniqueSlug('First Product', []);      expect(newSlug).toBe('first-product');    });  });});
